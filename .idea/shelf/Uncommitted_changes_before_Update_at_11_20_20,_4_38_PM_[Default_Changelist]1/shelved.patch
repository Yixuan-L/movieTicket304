Index: src/database/DatabaseConnectionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package database;\n\nimport model.*;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport com.mysql.jdbc.Driver;\n\npublic class DatabaseConnectionHandler {\n    //    private static final String ORACLE_URL = \"jdbc:oracle:thin:@localhost:1522:stu\";\n    private static final String ORACLE_URL = \"jdbc:mysql://localhost:3306/304movie?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC\";\n    private static final String ORACLE_USERNAME = \"root\";\n    private static final String ORACLE_PASSWORD = \"password\";\n\n    private static final String EXCEPTION_TAG = \"[EXCEPTION]\";\n    private static final String WARNING_TAG = \"[WARNING]\";\n\n    private Connection connection = null;\n\n    public DatabaseConnectionHandler() {\n        try {\n            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n    }\n\n    public boolean connectToOracle() {\n        try {\n            System.out.println(\"sssssssssssssssssssasdsad\");\n            if (connection != null)\n                connection.close();\n\n            connection = DriverManager.getConnection(ORACLE_URL, ORACLE_USERNAME, ORACLE_PASSWORD);\n            connection.setAutoCommit(false);\n            System.out.println(\"\\nConnected to Oracle!\");\n            return true;\n\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n            return false;\n        }\n    }\n\n    public void close() {\n        try {\n            if (connection != null) {\n                connection.close();\n            }\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n    }\n\n    private void rollbackConnection() {\n        try {\n            connection.rollback();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n    }\n\n\n    public TheatreModel[] showTheaters() {\n        ArrayList<TheatreModel> models = new ArrayList<>();\n        try {\n            String sql = \"SELECT * FROM THEATER\";\n            Statement statement = connection.createStatement();\n            ResultSet rs = statement.executeQuery(sql);\n            while (rs.next()) {\n                System.out.println(rs.getString(1));\n                System.out.println(rs.getString(2));\n                System.out.println(rs.getString(3));\n                System.out.println(rs.getString(4));\n                System.out.println(rs.getString(5));\n                TheatreModel model = new TheatreModel(\n\n                        rs.getString(1),\n                        rs.getString(2),\n                        rs.getString(3),\n                        rs.getString(4),\n                        rs.getString(5));\n\n                models.add(model);\n            }\n            rs.close();\n            statement.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return models.toArray(new TheatreModel[models.size()]);\n    }\n\n    public void updateTheaters(int id, String name) {\n        try {\n            PreparedStatement ps = connection.prepareStatement(\"UPDATE theater SET  = ? WHERE branch_id = ?\");\n            ps.setString(1, name);\n            ps.setInt(2, id);\n\n            int rowCount = ps.executeUpdate();\n            if (rowCount == 0) {\n                System.out.println(WARNING_TAG + \" Branch \" + id + \" does not exist!\");\n            }\n\n            connection.commit();\n\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n            rollbackConnection();\n        }\n    }\n\n    public void updateCustomer(int id, String[] updateInfo) {\n        try {\n//            String[] column = new String[]{\"name\", \"address\", \"email\", \"phoneNumber\"};\n//            String query = \"UPDATE theater SET\"\n//            for(int i = 0; i < column.length; i++){\n//\n//            }\n            String query = \"Update customer set name = ?, address = ?, email = ?, phoneNumber= ? where customer_id= ?\";\n            PreparedStatement ps = connection.prepareStatement(query);\n            ps.setString(1, updateInfo[0]);\n            ps.setString(2, updateInfo[1]);\n            ps.setString(3, updateInfo[2]);\n            ps.setString(4, updateInfo[3]);\n            ps.setInt(5, id);\n\n            int rowCount = ps.executeUpdate();\n            if (rowCount == 0) {\n                System.out.println(WARNING_TAG + \" Branch \" + id + \" does not exist!\");\n            }\n\n            connection.commit();\n\n            ps.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n            rollbackConnection();\n        }\n    }\n\n    public HallModel[] showHalls() {\n        ArrayList<HallModel> models = new ArrayList<>();\n        try {\n            String sql = \"SELECT * FROM HALLS\";\n            Statement statement = connection.createStatement();\n            ResultSet rs = statement.executeQuery(sql);\n            while (rs.next()) {\n                HallModel model = new HallModel(\n                        rs.getString(1),\n                        rs.getString(2),\n                        rs.getInt(3),\n                        rs.getString(4));\n\n                models.add(model);\n            }\n            rs.close();\n            statement.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return models.toArray(new HallModel[models.size()]);\n    }\n\n    public SeatModel[] showSeats() {\n        ArrayList<SeatModel> models = new ArrayList<>();\n        try {\n            String sql = \"SELECT * FROM SEATS \";\n            Statement statement = connection.createStatement();\n            ResultSet rs = statement.executeQuery(sql);\n            while (rs.next()) {\n                SeatModel model = new SeatModel(\n                        rs.getString(1),\n                        rs.getString(2),\n                        rs.getString(3));\n\n                models.add(model);\n            }\n            rs.close();\n            statement.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return models.toArray(new SeatModel[models.size()]);\n    }\n\n\n    public CustomerModel[] showCustomers() {\n        ArrayList<CustomerModel> models = new ArrayList<>();\n        try {\n            String sql = \"SELECT * FROM CUSTOMER\";\n            Statement statement = connection.createStatement();\n            ResultSet rs = statement.executeQuery(sql);\n            while (rs.next()) {\n                CustomerModel model = new CustomerModel(\n                        rs.getInt(1),\n                        rs.getString(2),\n                        rs.getString(3),\n                        rs.getString(4),\n                        rs.getString(5));\n                models.add(model);\n            }\n            rs.close();\n            statement.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return models.toArray(new CustomerModel[models.size()]);\n    }\n\n    public TicketModel[] showTickets() {\n        ArrayList<TicketModel> models = new ArrayList<>();\n        try {\n            String sql = \"SELECT * FROM TICKET\";\n            Statement statement = connection.createStatement();\n            ResultSet rs = statement.executeQuery(sql);\n            while (rs.next()) {\n                TicketModel model = new TicketModel(\n                        rs.getString(1),\n                        rs.getString(2),\n                        rs.getString(3),\n                        rs.getString(4),\n                        rs.getString(5));\n//                        rs.getString(6));\n                models.add(model);\n            }\n            rs.close();\n            statement.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return models.toArray(new TicketModel[models.size()]);\n    }\n\n    public OrderModel[] showOrders() {\n        ArrayList<OrderModel> models = new ArrayList<>();\n        try {\n            String sql = \"SELECT * FROM reservation\";\n            Statement statement = connection.createStatement();\n            ResultSet rs = statement.executeQuery(sql);\n            while (rs.next()) {\n                OrderModel model = new OrderModel(\n                        rs.getString(1),\n                        rs.getString(2),\n                        rs.getString(3),\n                        rs.getString(4),\n                        rs.getString(5),\n                        rs.getString(6));\n                models.add(model);\n            }\n            rs.close();\n            statement.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return models.toArray(new OrderModel[models.size()]);\n    }\n\n\n    public int makePaymentCash(int amount) {\n        int id = 0;\n        try {\n\n            PreparedStatement ps = connection.prepareStatement(\"Insert into payment(payment_amount) values(?)\");\n            ps.setInt(1, amount);\n            int rowCount = ps.executeUpdate();\n            System.out.println(rowCount);\n\n\n            String sql = \"select * from payment where payment_id = (select MAX(payment_id) from payment)\";\n            Statement statement = connection.createStatement();\n            ResultSet res = statement.executeQuery(sql);\n\n\n            if (res.next()) {\n                id = res.getInt(1);\n            }\n\n\n            ps = connection.prepareStatement(\"Insert into cash(payment_id, payment_amount) values(?, ?)\");\n            ps.setInt(1, id);\n            ps.setInt(2, amount);\n            rowCount = ps.executeUpdate();\n            connection.commit();\n            ps.close();\n\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return id;\n    }\n\n\n    public int makePaymentCard(int amount, String cardnumber, String cvv) {\n        int id = 0;\n        try {\n\n            PreparedStatement ps = connection.prepareStatement(\"Insert into payment(payment_amount) values(?)\");\n            ps.setInt(1, amount);\n            int rowCount = ps.executeUpdate();\n            System.out.println(rowCount);\n\n\n            String sql = \"select * from payment where payment_id = (select MAX(payment_id) from payment)\";\n            Statement statement = connection.createStatement();\n            ResultSet res = statement.executeQuery(sql);\n\n\n            if (res.next()) {\n                id = res.getInt(1);\n            }\n\n\n            ps = connection.prepareStatement(\"Insert into card(payment_id, card_number, cvv) values(?, ?, ?)\");\n            ps.setInt(1, id);\n            ps.setString(2, cardnumber);\n            ps.setString(3, cvv);\n            rowCount = ps.executeUpdate();\n            connection.commit();\n            ps.close();\n\n\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return id;\n    }\n\n\n\n    public boolean createReservation ( String branch_name, String movie_name, String movie_language, String movie_format, String customer_name, int payment_id ) {\n        try {\n\n\n            String sql = \"select movie_id from movie where  movie_name = '\" + movie_name + \"' and language = '\" + movie_language + \"' and format ='\" + movie_format+\"'\";\n            System.out.println(sql);\n\n            Statement statement = connection.createStatement();\n            ResultSet res = statement.executeQuery(sql);\n            int movie_id = 0;\n            if (res.next()) {\n                movie_id = res.getInt(1);\n            }\n\n            sql = \"select customer_id from customer where name = '\" + customer_name+\"'\";\n            System.out.println(sql);\n             statement = connection.createStatement();\n             res = statement.executeQuery(sql);\n            int customer_id = 0;\n            if (res.next()) {\n                customer_id= res.getInt(1);\n            }\n\n            Timestamp orderTime = new Timestamp(System.currentTimeMillis());\n            PreparedStatement ps = connection.prepareStatement(\"insert into reservation(order_time, branch_name, movie_id, payment_id, customer_id)values(?,?,?,?,?)\");\n            ps.setTimestamp(1, orderTime);\n            ps.setString(2, branch_name);\n            ps.setInt(3, movie_id );\n            ps.setInt(4, payment_id );\n            ps.setInt(5, customer_id );\n            //int rowCount = 0;\n            int rowCount = ps.executeUpdate();\n            connection.commit();\n            ps.close();\n\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return false;\n    }\n\n    //branch 营业额---report--show all branches\n    public BranchRevenueModel[] branchRevenue (){\n        ArrayList<BranchRevenueModel> models = new ArrayList<>();\n        String sql;\n        String branch;\n        double amount;\n\n        sql = \"select th.branch_name, sum(p.payment_amount)\\n\" +\n                \"from theatre th, reservation r, payment p\\n\" +\n                \"where th.branch_name = r.branch_name and r.payment_id = p.payment_id\\n\" +\n                \"group by th.branch_name\";\n        try {\n           // System.out.println(sql);\n            Statement  statement = connection.createStatement();\n            ResultSet res = statement.executeQuery(sql);\n\n            while ( res.next()) {\n                branch = res.getString(1);\n                System.out.println(branch);\n\n                amount = res.getDouble(2);\n                System.out.println(amount);\n                BranchRevenueModel model = new BranchRevenueModel(branch, amount);\n                models.add(model);\n            }\n            res.close();\n            statement.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return models.toArray(new BranchRevenueModel[models.size()]);\n    }\n    //show the sold tickets for each branch, only show the branch sells more than 3 tickets\n    public BranchTicketModel[] branchticket (){\n        ArrayList<BranchTicketModel> models = new ArrayList<>();\n        String sql;\n        String branch;\n        int ticket;\n\n        sql = \"select th.branch_name, COUNT(ticket_number)\\n\" +\n                \"from theatre th, ticket t, reservation r\\n\" +\n                \"where th.branch_name = r.branch_name and t.confirmation_number = r.confirmation_number\\n\" +\n                \"group by th.branch_name\\n\" +\n                \"having count(ticket_number) > 3\";\n        try {\n            // System.out.println(sql);\n            Statement  statement = connection.createStatement();\n            ResultSet res = statement.executeQuery(sql);\n\n            while ( res.next()) {\n                branch = res.getString(1);\n                System.out.println(branch);\n\n                ticket = res.getInt(2);\n                System.out.println(ticket);\n                BranchTicketModel model = new BranchTicketModel(branch, ticket);\n                models.add(model);\n            }\n            res.close();\n            statement.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return models.toArray(new BranchTicketModel[models.size()]);\n    }\n\n    //find average price for 2d and 3d movies, requiring each format has at least 2 movies\n    public FormatPrice[] formatPrice (){\n        ArrayList<FormatPrice> models = new ArrayList<>();\n        String sql;\n        String format;\n        double price;\n\n        sql = \"select format, AVG(movie_price)\\n\" +\n                \"from movie m, movieprice mp\\n\" +\n                \"where m.movie_id = mp.movie_id\\n\" +\n                \"group by format\\n\" +\n                \"having 1 < (select count(*)\\n\" +\n                \"\\t\\tfrom movie m2\\n\" +\n                \"\\t\\twhere m.format = m2.format)\";\n        try {\n            // System.out.println(sql);\n            Statement  statement = connection.createStatement();\n            ResultSet res = statement.executeQuery(sql);\n\n            while (res.next()) {\n                format = res.getString(1);\n                System.out.println(format);\n\n                price = res.getInt(2);\n                System.out.println(price);\n                FormatPrice model = new FormatPrice(format,  price);\n                models.add(model);\n            }\n            res.close();\n            statement.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return models.toArray(new FormatPrice[models.size()]);\n    }\n\n    //find the customer information for who bought all movies\n    public CustomerModel[] customerAllMovie (){\n        ArrayList<CustomerModel> models = new ArrayList<>();\n        String sql;\n\n\n        sql = \"select *\\n\" +\n                \"from customer c\\n\" +\n                \"where not exists\\n\" +\n                \"          (select m.movie_id\\n\" +\n                \"          from movie m\\n\" +\n                \"          where not exists\\n\" +\n                \"          (select r.customer_id\\n\" +\n                \"          from  reservation r\\n\" +\n                \"          where r.movie_id = m.movie_id and r.customer_id = c.customer_id))\";\n        try {\n            // System.out.println(sql);\n            Statement  statement = connection.createStatement();\n            ResultSet res = statement.executeQuery(sql);\n\n            while (res.next()) {\n                CustomerModel model = new CustomerModel(\n                        res.getInt(1),\n                        res.getString(2),\n                        res.getString(3),\n                        res.getString(4),\n                        res.getString(5));\n                models.add(model);\n            }\n            res.close();\n            statement.close();\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return models.toArray(new CustomerModel[models.size()]);\n    }\n\n\n\n\n\n    public boolean deleteMovie(String moviename) {\n        try {\n\n            PreparedStatement ps = connection.prepareStatement(\"delete from movie where movie_name = ?\");\n            ps.setString(1, moviename );\n            int rowCount = ps.executeUpdate();\n            connection.commit();\n            ps.close();\n            return true;\n\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        return false;\n    }\n\n\n    public boolean addMovie(int movie_id, String movie_name, String language, String format, String movie_genre, String firm_rating, int active_date) {\n        try {\n\n            PreparedStatement ps = connection.prepareStatement(\"insert into movie(movie_id, movie_name, language, format, movie_genre, firm_rating, active_date)values(?,?,?,?,?,?,?)\");\n            ps.setInt(1, movie_id);\n            ps.setString(2, movie_name);\n            ps.setString(3, language);\n            ps.setString(4, format);\n            ps.setString(5, movie_genre );\n            ps.setString(6, firm_rating);\n            ps.setInt(7, active_date);\n//            int rowCount = ps.executeUpdate();\n\n            System.out.println(\"YAY\");\n            connection.commit();\n            ps.close();\n            return true;\n\n        } catch (SQLException e) {\n            System.out.println(EXCEPTION_TAG + \" \" + e.getMessage());\n        }\n        System.out.println(\"NOPE\");\n        return false;\n\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/database/DatabaseConnectionHandler.java	(revision 141b8c4ee9890ea75c6022a0e2e84ed1492a1aca)
+++ src/database/DatabaseConnectionHandler.java	(date 1605919120535)
@@ -9,7 +9,7 @@
     //    private static final String ORACLE_URL = "jdbc:oracle:thin:@localhost:1522:stu";
     private static final String ORACLE_URL = "jdbc:mysql://localhost:3306/304movie?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC";
     private static final String ORACLE_USERNAME = "root";
-    private static final String ORACLE_PASSWORD = "password";
+    private static final String ORACLE_PASSWORD = "einstein";
 
     private static final String EXCEPTION_TAG = "[EXCEPTION]";
     private static final String WARNING_TAG = "[WARNING]";
